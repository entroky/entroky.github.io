# .github/workflows/gh-pages.yml

name: Deploy My Forest to Pages

on:
  push:
    paths-ignore:
      - "LICENSE"
      - "README.md"
      # Ignore changes to the Dockerfile itself or other workflow files from triggering deployment
      - "dockerfile"
      # Re-include this file to trigger on its own changes if needed for testing
      - ".github/workflows/gh-pages.yml"
    branches:
      - main

# Allow one concurrent deployment.
concurrency:
  group: "pages"
  cancel-in-progress: true

# Default to bash
defaults:
  run:
    shell: bash

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Page
permissions:
  contents: read
  pages: write
  id-token: write
  # Add packages: write permission if you want to publish the image to GHCR
  packages: write

jobs:
  # Optional: Job to build and push the Docker image to GHCR
  # This makes the 'build' job faster as it pulls the image instead of building it.
  # Uncomment and adapt if you want to use a pre-built image.
  # build-docker-image:
  #   runs-on: ubuntu-latest
  #   # Only run when Dockerfile changes or manually triggered
  #   if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[build image]')
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #
  #     - name: Log in to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #
  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./dockerfile # Path to your Dockerfile
  #         push: true
  #         tags: ghcr.io/entroky/entroky.github.io:latest # Use your repo name

  # Build job - Now runs inside the Docker container
  build:
    runs-on: ubuntu-latest # Base OS for the runner itself
    # Optional: Uncomment if using the build-docker-image job above
    # needs: build-docker-image
    container:
      # Option 1: Use the pre-built image from GHCR (faster workflow runs)
      # Make sure the image tag matches the one pushed by the build-docker-image job
      image: ghcr.io/entroky/entroky.github.io:latest
      # Option 2: Build the image from the Dockerfile in the repo (slower first time)
      # image: ./dockerfile # Use the Dockerfile at the root
      credentials: # Needed to pull from GHCR
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code into container
        uses: actions/checkout@v4
        with:
          # Ensure submodules are checked out if theme is a submodule
          submodules: recursive

      # Cache HTML files (still useful)
      - name: Cache HTML Output
        id: cache-html
        uses: actions/cache@v4
        with:
          # Path is relative to the WORKDIR inside the container
          path: /usr/src/app/output/*.html
          # Key depends on XML files and the main XSL stylesheet
          key: ${{ runner.os }}-html-${{ hashFiles('trees/**/*.tree', 'assets/uts-forest.xsl') }}
          restore-keys: |
            ${{ runner.os }}-html-

      # Setup Pages (if deploying to GitHub Pages)
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
        # Add condition if needed, e.g., if: github.ref == 'refs/heads/main' && !env.ACT

      # Build step - Now much simpler!
      # The container has just, bun, opam, forester, texlive pre-installed
      - name: Build Project
        run: just build # This executes build.sh via the justfile inside the container

      # Check for PDF files (optional but good practice)
      - name: Check for PDF files
        run: |
          pdf_count=$(find ./output -name "*.pdf" | wc -l)
          if [ "$pdf_count" -eq 0 ]; then
            echo "::warning::No PDF files found in the output directory."
            # Consider exiting with error if PDFs are mandatory:
            # echo "::error::No PDF files found, expected for build."
            # exit 1
          fi
          echo "Found $pdf_count PDF files."

      # Fix permissions (still potentially needed depending on container user)
      - name: Fix Permissions
        run: |
          chmod -c -R +rX "./output/" | while read line; do
            echo "::warning title=Invalid file permissions automatically fixed::$line"
          done

      # Upload Pages artifact (if deploying to GitHub Pages)
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Path is relative to the WORKDIR inside the container
          path: /usr/src/app/output
        # Add condition if needed, e.g., if: github.ref == 'refs/heads/main' && !env.ACT

  # Deploy job remains the same
  deploy:
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

name: Deploy My Forest to Pages

on:
  push:
    paths-ignore:
      - "LICENSE"
      - "README.md"
    branches:
      - main
env:
  OCAML_VERSION: 5.3.0
  
# Allow one concurrent deployment.
concurrency:
  group: "pages"
  cancel-in-progress: true

# Default to bash
defaults:
  run:
    shell: bash

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Page
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Build job
  build:
    runs-on: ubuntu-22.04
    env:
      PLATFORM: linux64
      OPAMYES: 1
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive
      - name: Prepare and Upload Dependencies Artifact
        run: |
          PACKAGES="darcs bubblewrap ocaml-nox libpcre2-dev zlib1g-dev libgtk2.0-dev libmbedtls-dev ninja-build libev-dev libev4  musl musl-dev musl-tools"
          TARGET_DIR="${{ github.workspace }}/boost_deps"
          sudo apt-get update -qqy && \
          sudo apt-get install -qqy $PACKAGES
          mkdir -p "$TARGET_DIR"
          dpkg -L $PACKAGES | while IFS= read -r item; do
            if [ -e "$item" ] && [ ! -d "$item" ]; then
              printf '%s\n' "$item"
            fi
          done | xargs -rd '\n' --no-run-if-empty cp --parents --target-directory "$TARGET_DIR/"
      - uses: actions/upload-artifact@v4
        with:
          name: boost-dependencies
          path: ${{ github.workspace }}/boost_deps

      # Setup Just
      - uses: extractions/setup-just@v1
        with:
          just-version: 1.40.0

      # Setup Bun
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.12

      # Setup TeX Live Minimal
      - uses: teatimeguest/setup-texlive-action@v3
        id: setup_texlive
        with:
          packages: > # Minimal set based on ent/tex analysis
            scheme-basic
            amsmath amsfonts amssymb graphicx geometry ifthen xcolor hyperref float booktabs
            enumerate xspace xpatch mathtools stmaryrd csquotes standalone microtype tools collection-latexrecommended
            fontspec newpxtext newpxmath utfsym newunicodechar collection-fontsrecommended
            listings
            tikz pgfplots tikz-cd tikz-3dplot tkz-euclide contour dot2texi
            algpseudocodex pseudo tabto tabularx
            amsthm thmtools mdframed tcolorbox ntheorem
            imakeidx cleveref backref makeindex bibtex
            physics worldflags todonotes
            xelatex

      # Setup Pages
      - uses: actions/configure-pages@v5
        id: pages
        if: ${{ !env.ACT }}
      - name: Cache opam
        id: cache-opam
        uses: actions/cache@v4
        with:
          path: ~/.opam/
          key: ${{ runner.os }}-${{ env.OCAML_VERSION }}-${{ hashFiles('./haxe.opam', './libs/') }}-1

      - name: Install dependencies
        run: |
          set -ex
          curl -sSL https://github.com/ocaml/opam/releases/download/2.3.0/opam-2.3.0-x86_64-linux -o $RUNNER_TEMP/opam
          sudo install $RUNNER_TEMP/opam /usr/local/bin/opam

      - name: Install OCaml libraries
        if: steps.cache-opam.outputs.cache-hit != 'true'
        run: |
          set -ex
          opam init -c ${{ env.OCAML_VERSION }}
          opam update
          opam pin add forester git+https://git.sr.ht/~jonsterling/ocaml-forester#56de06afe952d752c1a13fdcd8bb56c5fef9956f . --no-action
          opam install forester --deps-only --assume-depexts
          opam install forester --yes
          opam list
          ocamlopt -v

      # Build with Forester
      - run: |
          eval $(opam env)
          export TERM=xterm-256color
          opam exec -- forester --version
          bash ./build.sh
          
      # Cache HTML files
      - uses: actions/cache@v4
        with:
          path: output/*.html
          key: ${{ runner.os }}-html-${{ hashFiles('output/*.xml', 'output/*.xsl') }}
          restore-keys: |
            ${{ runner.os }}-html-
            
      # Check for PDF files
      - run: |
          pdf_count=$(find ./output -name "*.pdf" | wc -l)
          if [ "$pdf_count" -eq 0 ]; then
            echo "Error: No PDF files found in the output directory."
          fi
          echo "Found $pdf_count PDF files."

      # Fix permissions
      - run: |
          chmod -c -R +rX "./output/" | while read line; do
            echo "::warning title=Invalid file permissions automatically fixed::$line"
          done

      # Upload Pages artifact
      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./output
        if: ${{ !env.ACT }}

  # Deploy job
  deploy:
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/deploy-pages@v4
